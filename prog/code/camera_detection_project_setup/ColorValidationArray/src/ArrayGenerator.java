public class ArrayGenerator {

    public static void main(String[] args) {

        int[] values = new int[8192];

        for(int i = 0; i < 65536; i++) {
            int redAmount = i >> 11;
            int greenAmount = (i & 0b11111100000) >> 5;
            int blueAmount = i & 0b11111;

            if(compare(redAmount << 3, greenAmount << 2, blueAmount << 3)) {
                values[i >> 3] |= (1 << (blueAmount & 7));
            }
        }

        IOFile.safeCreateFileWithContent(
                "..\\..\\hydra_alpha_v1\\config\\CustomTankDetectionColorValidation.h",
                buildArrayAsString(values)
        );
    }

    public static final double MINIMAL_RATIO_TO_CONSIDER_VALID = 2;

    public static boolean compare(double red, double green, double blue) {
        return blue / (red + green) > MINIMAL_RATIO_TO_CONSIDER_VALID;
    }

    public static String buildArrayAsString(int[] values) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("// File generated by CVAG V0.1 //\n");
        stringBuilder.append("// .\n");
        stringBuilder.append("// ..\n");
        stringBuilder.append("// ...\n");
        stringBuilder.append("// .\n");
        stringBuilder.append("// ..\n");
        stringBuilder.append("// ...\n");
        stringBuilder.append("// Generation starts.\n");
        stringBuilder.append("//\n");
        stringBuilder.append("// ---\n");
        stringBuilder.append("\n");
        stringBuilder.append("unsigned char byteColorValidationValues[8192] = {\n");
        stringBuilder.append("\t").append(values[0]);
        for(int i = 1; i < values.length; i++) {
            stringBuilder.append(",\n").append("\t").append(values[i]);
        }
        stringBuilder.append("\n};\n");
        stringBuilder.append("\n");
        stringBuilder.append("// ---\n");
        stringBuilder.append("\n");
        stringBuilder.append("\n");
        stringBuilder.append("#define validateColor565(color) (byteColorValidationValues[color >> 3] & (1 << (color & 7)))\n");
        stringBuilder.append("\n");
        stringBuilder.append("// ---\n");

        return stringBuilder.toString();
    }

}
